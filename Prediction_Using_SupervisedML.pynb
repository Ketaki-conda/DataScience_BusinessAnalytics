{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "intense-copyright",
   "metadata": {},
   "source": [
    "# Graduate Rotational Internship Program\n",
    "# \"The Sparks Foundation\"\n",
    "\n",
    "## Prediction using Supervised ML - Predicting the percentage of an student based on the no. of study hours.\n",
    "## Author: Ketaki Dhotre\n",
    "\n",
    "\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "limiting-purse",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Success\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd  \n",
    "import numpy as np    \n",
    "import matplotlib.pyplot as plt \n",
    "\n",
    "#Reading the data\n",
    "url = \"http://bit.ly/w-data\"\n",
    "my_data = pd.read_csv(url)\n",
    "print(\"Success\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "popular-audit",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours</th>\n",
       "      <th>Scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.5</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.2</td>\n",
       "      <td>27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.5</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.5</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.5</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Hours  Scores\n",
       "0    2.5      21\n",
       "1    5.1      47\n",
       "2    3.2      27\n",
       "3    8.5      75\n",
       "4    3.5      30\n",
       "5    1.5      20"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Viewing the data\n",
    "my_data.head(6) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "sticky-savings",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the graph\n",
    "\n",
    "my_data.plot(x='Hours', y='Scores',style='o',color='red')    \n",
    "plt.title('Hours Vs Percentage Graph')    \n",
    "plt.xlabel('Hours Studied')    \n",
    "plt.ylabel('Percentage Score')    \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "chronic-escape",
   "metadata": {},
   "source": [
    "Here we see that there is a positive linear relation between the number of hours studied and percentage of score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "after-horizon",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dividing the data into attributes and labels \n",
    "\n",
    "X = my_data.iloc[:, :-1].values    \n",
    "y = my_data.iloc[:, 1].values  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "sensitive-fever",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using Scikit Learn's builtin method of train_test_split()\n",
    "\n",
    "from sklearn.model_selection import train_test_split    \n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2, random_state=0) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "pregnant-copying",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Success!.\n"
     ]
    }
   ],
   "source": [
    "#Training the Algorithm\n",
    "\n",
    "from sklearn.linear_model import LinearRegression    \n",
    "regressor = LinearRegression()    \n",
    "regressor.fit(X_train, y_train)   \n",
    "  \n",
    "print(\"Training Success!.\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "animated-innocent",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting the regression line\n",
    "line = regressor.coef_*X+regressor.intercept_  \n",
    "\n",
    "#graph\n",
    "plt.scatter(X, y)  \n",
    "plt.plot(X, line);  \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "reasonable-individual",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.5]\n",
      " [3.2]\n",
      " [7.4]\n",
      " [2.5]\n",
      " [5.9]]\n"
     ]
    }
   ],
   "source": [
    "#Predicting the scores for the model\n",
    "\n",
    "print(X_test)   \n",
    "y_pred = regressor.predict(X_test)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "external-sapphire",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Actual  Predicted\n",
      "0      20  16.884145\n",
      "1      27  33.732261\n",
      "2      69  75.357018\n",
      "3      30  26.794801\n",
      "4      62  60.491033\n"
     ]
    }
   ],
   "source": [
    "#Comparing actual and predicted score\n",
    "\n",
    "df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})    \n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "sound-afternoon",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of hours = [[9.25]]\n",
      "Prediction Score = 93.69173248737535\n"
     ]
    }
   ],
   "source": [
    "#Testing our Model\n",
    "\n",
    "hours = [[9.25]]  \n",
    "own_pred = regressor.predict(hours)  \n",
    "print(\"Number of hours = {}\".format(hours))  \n",
    "print(\"Prediction Score = {}\".format(own_pred[0]))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "liquid-science",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 4.183859899002975\n"
     ]
    }
   ],
   "source": [
    "#Finding the error/Evaluating the performance\n",
    "\n",
    "from sklearn import metrics  \n",
    "print('Mean Absolute Error:',metrics.mean_absolute_error(y_test, y_pred)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "functioning-soccer",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
